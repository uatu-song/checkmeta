# Synergy System Integration Instructions

This document provides step-by-step instructions for integrating the SynergyEngine into the META Fantasy League Simulator. Follow these instructions to apply the necessary changes to your codebase.

## File Structure

The integration consists of three main files:

1. `synergy_engine.py` - The core synergy system implementation
2. `synergy_integration.py` - Integration module that connects the SynergyEngine to the simulator
3. `meta_simulator_v4.py` - The main simulator file (needs to be modified)

## Step 1: Add Synergy Engine Files

First, add the `synergy_engine.py` and `synergy_integration.py` files to your project directory.

## Step 2: Modify MetaLeagueSimulator.__init__

Update the `__init__` method of the `MetaLeagueSimulator` class in `meta_simulator_v4.py`:

```python
def __init__(self):
    """Initialize the simulator"""
    # Validate system integrity
    if not SystemValidator.validate_all():
        logger.error("System validation failed")
        raise RuntimeError("System validation failed. Fix errors before continuing.")
    
    # Initialize subsystems
    self.trait_system = TraitSystem()
    self.chess_system = ChessSystem(CONFIG.paths["stockfish_path"])
    self.combat_system = CombatSystem(self.trait_system)
    self.convergence_system = ConvergenceSystem(self.trait_system)
    self.pgn_tracker = PGNTracker()
    self.stat_tracker = StatTracker()
    
    # Initialize synergy system (NEW)
    from synergy_engine import SynergyEngine
    self.synergy_engine = SynergyEngine(trait_system=self.trait_system, config=CONFIG)
    
    logger.info("META Fantasy League Simulator initialized successfully")
```

## Step 3: Modify simulate_match Method

Update the `simulate_match` method in `meta_simulator_v4.py` to include synergy detection and application:

Add the following code after getting team information and before setup context:

```python
# Detect and apply synergies (NEW)
if hasattr(self, 'synergy_engine') and self.synergy_engine:
    try:
        # Detect and apply team A synergies
        active_synergies_a = self.synergy_engine.detect_team_synergies(team_a_active, team_a_id)
        self.synergy_engine.apply_synergy_effects(team_a_active, team_a_id)
        
        # Detect and apply team B synergies
        active_synergies_b = self.synergy_engine.detect_team_synergies(team_b_active, team_b_id)
        self.synergy_engine.apply_synergy_effects(team_b_active, team_b_id)
        
        if show_details:
            logger.info(f"Team {team_a_name}: {len(active_synergies_a)} active synergies")
            logger.info(f"Team {team_b_name}: {len(active_synergies_b)} active synergies")
    except Exception as e:
        logger.error(f"Error processing synergies: {e}")
```

Then, add synergy information to the match result by adding this code just before returning the result:

```python
# Add synergy information to result (NEW)
if hasattr(self, 'synergy_engine') and self.synergy_engine:
    try:
        # Add synergy reports
        match_result["team_a_synergies"] = self.synergy_engine.get_active_synergies_report(team_a_id)
        match_result["team_b_synergies"] = self.synergy_engine.get_active_synergies_report(team_b_id)
        
        # Add dynamics reports
        match_result["team_a_dynamics"] = self.synergy_engine.get_team_dynamics_report(team_a_active)
        match_result["team_b_dynamics"] = self.synergy_engine.get_team_dynamics_report(team_b_active)
        
        # Reset synergy engine for next match
        self.synergy_engine.reset()
    except Exception as e:
        logger.error(f"Error adding synergy information to result: {e}")
```

## Step 4: Modify ConvergenceSystem.process_convergences

Update the `process_convergences` method in `meta_simulator_v4.py` to record convergence interactions:

Add the following code after processing convergences but before returning the result:

```python
# Record convergence interactions in synergy engine (NEW)
if hasattr(self.simulator, 'synergy_engine') and self.simulator.synergy_engine:
    try:
        for conv in convergences:
            # Find corresponding characters
            a_char = next((c for c in first_team if c["name"] == conv["a_character"]), None)
            b_char = next((c for c in second_team if c["name"] == conv["b_character"]), None)
            
            if a_char and b_char:
                # Determine result
                result = "win" if conv["winner"] == conv["a_character"] else "loss"
                damage = conv.get("reduced_damage", 0)
                
                # Record interaction
                self.simulator.synergy_engine.record_convergence_interaction(a_char, b_char, result, damage)
                
                # Apply dynamic bonuses
                self.simulator.synergy_engine.apply_dynamic_bonuses(a_char, first_team)
                self.simulator.synergy_engine.apply_dynamic_bonuses(b_char, second_team)
    except Exception as e:
        logger.error(f"Error recording convergence interactions: {e}")
```

## Step 5: Modify TraitSystem.check_trait_activation

Update the `check_trait_activation` method in `meta_simulator_v4.py` to apply synergy bonuses to trait activation:

Add the following code just before calculating activation chance:

```python
# Apply synergy bonuses to activation chance (NEW)
synergy_bonus = 0
if "synergy_bonuses" in character:
    # Get trait activation bonus from synergies
    synergy_bonus += character["synergy_bonuses"].get("trait_activation", 0)
    synergy_bonus += character["synergy_bonuses"].get("dynamic_trait_activation", 0)
```

Then modify the activation chance calculation:

```python
# Calculate activation chance
activation_chance = self._calculate_activation_chance(character, trait, context)

# Apply synergy bonus (NEW)
if synergy_bonus > 0:
    activation_chance += synergy_bonus
    # Cap at reasonable range (20-95%)
    activation_chance = max(0.2, min(activation_chance, 0.95))
```

## Step 6: Update MatchVisualizer

Add synergy information to the match visualization by updating the `generate_match_summary` method:

Add the following code to include synergy information in the summary:

```python
# Add synergy information if available (NEW)
if "team_a_synergies" in result and "team_b_synergies" in result:
    summary += f"\nACTIVE SYNERGIES:\n"
    
    # Team A synergies
    team_a_synergies = result["team_a_synergies"]["synergies"]
    if team_a_synergies:
        summary += f"{team_a_name} ({len(team_a_synergies)}):\n"
        for synergy in team_a_synergies[:3]:  # Show up to 3 synergies
            summary += f"- {synergy['name']}: {synergy['description']}\n"
        if len(team_a_synergies) > 3:
            summary += f"  (and {len(team_a_synergies) - 3} more...)\n"
    else:
        summary += f"{team_a_name}: No active synergies\n"
    
    # Team B synergies
    team_b_synergies = result["team_b_synergies"]["synergies"]
    if team_b_synergies:
        summary += f"{team_b_name} ({len(team_b_synergies)}):\n"
        for synergy in team_b_synergies[:3]:  # Show up to 3 synergies
            summary += f"- {synergy['name']}: {synergy['description']}\n"
        if len(team_b_synergies) > 3:
            summary += f"  (and {len(team_b_synergies) - 3} more...)\n"
    else:
        summary += f"{team_b_name}: No active synergies\n"
```

## Step 7: Update generate_narrative_report

Modify the `generate_narrative_report` method to include synergy information in the narrative:

Add the following code to incorporate synergies into the narrative:

```python
# Add synergy narrative if available (NEW)
if "team_a_synergies" in result and "team_b_synergies" in result:
    # Get synergy counts
    team_a_synergies = result["team_a_synergies"]["synergies"]
    team_b_synergies = result["team_b_synergies"]["synergies"]
    
    # Add synergy narrative if either team has synergies
    if team_a_synergies or team_b_synergies:
        winning_team_name = team_a_name if winner == "Team A" else team_b_name
        winning_synergies = team_a_synergies if winner == "Team A" else team_b_synergies
        
        if winning_synergies:
            # Pick a significant synergy from the winning team
            key_synergy = winning_synergies[0] if winning_synergies else None
            
            if key_synergy:
                body += f"\n\n{winning_team_name}'s '{key_synergy['name']}' synergy proved crucial "
                body += f"in their strategy, {key_synergy['description'].lower()}. "
```

## Step 8: Test the Integration

After making these changes, run the simulator to ensure everything works as expected. You should see synergy effects being applied during matches, and synergy information included in the match reports.

## Advanced Integration (Optional)

For a more advanced integration, you can use the `SynergyIntegration` class instead of directly modifying the simulator code. This approach allows for clean activation and deactivation of the synergy system.

To use this approach, add the following to your main execution code:

```python
from synergy_integration import SynergyIntegration

# Initialize simulator
simulator = MetaLeagueSimulator()

# Initialize and activate synergy integration
synergy_integration = SynergyIntegration(simulator)
synergy_integration.activate()

# Run simulation
simulator.run_matchday(day_number=1)
```

This method provides better separation of concerns and easier maintenance.